replicaCount: 1

image:
  api: registry.gokcloud.com/gok-controller:latest

# Service Account configuration for Vault authentication
serviceAccount:
  create: true
  name: gok-controller
  annotations: {}
  automountServiceAccountToken: true

# RBAC configuration for Vault authentication
rbac:
  create: true
  rules:
  - apiGroups: [""]
    resources: ["serviceaccounts/token"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get"]
  
rabbitmqHost: rabbitmq.rabbitmq

env:
  RABBITMQ_HOST: "rabbitmq.rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_VHOST: "/"
  
  # Vault Configuration for RabbitMQ credentials (matches setup_vault_k8s_auth.sh)
  VAULT_ADDR: "http://vault.vault.svc.cloud.uat:8200"
  VAULT_K8S_AUTH_PATH: "kubernetes"
  VAULT_K8S_ROLE: "gok-controller"
  VAULT_PATH: "secret/data/rabbitmq"

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "gok-controller"
  hosts:
    - host: gok-controller.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - gok-controller.example.com
      secretName: gok-controller-tls

vault:
  # Enable Vault integration for RabbitMQ credentials
  enabled: true
  
  # Vault server configuration (using ingress URL that works in tests)
  address: "http://vault.vault.svc.cloud.uat:8200"
  
  # === SWITCHABLE VAULT INTEGRATION MODES ===
  # Choose between agent injector (static), CSI driver, direct API (dynamic), or hybrid
  integration:
    # Mode: "agent" for Vault Agent Injector, "api" for direct API calls, "csi" for CSI driver, "hybrid" for all
    mode: "hybrid"  # Options: "agent", "api", "csi", "hybrid"
    
    # Agent Injector Configuration (for static secrets)
    agentInjector:
      enabled: true
      role: "gok-controller"
      secrets:
        # Static configuration secrets
        config:
          path: "secret/gok-controller/config"
        # RabbitMQ credentials (can be used as fallback)
        rabbitmq:
          path: "secret/rabbitmq"
    
    # Direct API Configuration (for dynamic credentials)
    directApi:
      enabled: true
      # Path to RabbitMQ credentials in Vault
      credentialPath: "secret/rabbitmq"
      # Path to static configuration
      configPath: "secret/gok-controller/config"
    
    # CSI Driver Configuration (for file-based secrets)
    csi:
      enabled: true
      role: "gok-controller"
      vaultNamespace: ""  # Leave empty if not using Vault Enterprise namespaces
      secretProviderClass:
        name: "gok-controller-provider"
      # Define secrets to retrieve via CSI
      secrets:
        - objectName: "config-json"
          secretPath: "secret/gok-controller/config"
          secretKey: "config_json"
        - objectName: "oauth-client-secret"
          secretPath: "secret/gok-controller/config"
          secretKey: "oauth_client_secret"
        - objectName: "static-config"
          secretPath: "secret/gok-controller/config"
          secretKey: "static_config"
        - objectName: "rabbitmq-username"
          secretPath: "secret/rabbitmq"
          secretKey: "username"
        - objectName: "rabbitmq-password"
          secretPath: "secret/rabbitmq"
          secretKey: "password"
        - objectName: "rabbitmq-host"
          secretPath: "secret/rabbitmq"
          secretKey: "host"
      # Optional: Create Kubernetes secrets from CSI mounted secrets
      secretObjects:
        - secretName: "gok-controller-config-secret"
          type: "Opaque"
          data:
            - objectName: "config-json"
              key: "config.json"
            - objectName: "oauth-client-secret"
              key: "oauth_client_secret"
            - objectName: "static-config"
              key: "static_config"
        - secretName: "gok-controller-rabbitmq-secret"
          type: "Opaque"
          data:
            - objectName: "rabbitmq-username"
              key: "username"
            - objectName: "rabbitmq-password"
              key: "password"
            - objectName: "rabbitmq-host"
              key: "host"
  
  # Authentication method for Vault
  auth:
    # Use Kubernetes service account for authentication
    method: "kubernetes"
    # Alternative: use token-based authentication
    # method: "token"
    # token: "vault-token-here"
    
    # Kubernetes auth configuration (matches setup_vault_k8s_auth.sh)
    kubernetes:
      role: "gok-controller"
      authPath: "kubernetes"
      serviceAccount: "gok-controller"
      namespace: "gok-controller"
      tokenPath: "/var/run/secrets/kubernetes.io/serviceaccount/token"
  
  # Fallback configuration if Vault is unavailable
  fallback:
    # Try Kubernetes secret as fallback
    useKubernetesSecret: true
    secretName: "rabbitmq-default-user"
    secretNamespace: "rabbitmq"
    
    # Final fallback to environment variables
    useEnvironmentVariables: true

oidc:
  issuer: https://keycloak.gokcloud.com/realms/GokDevelopers
  clientId: gok-developers-client
  requiredGroup: administrators
  
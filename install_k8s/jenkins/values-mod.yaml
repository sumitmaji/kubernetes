controller:
  JCasC:
    configScripts:
      authorization-strategy: |
        jenkins:
          authorizationStrategy:
            roleBased:
              roles:
                global:
                  - name: "admin"
                    permissions:
                      - "Overall/Administer"
                    entries:
                      - user: "skmaji1"
                  - name: "anonymous"
                    permissions:
                      - "Overall/Read"
                    entries:
                      - user: "anonymous"
                      
      security-realm: |
        jenkins:
          securityRealm:
            keycloak:
              keycloakJson: |-
                {
                  "realm": "GokDevelopers",
                  "auth-server-url": "https://keycloak.gokcloud.com",
                  "ssl-required": "external",
                  "resource": "gok-developers-client",
                  "credentials": {
                    "secret": "1iUh3ANkHCFeoR9vAO5RtGoXBmKlLGR8"
                  },
                  "confidential-port": 0,
                  "disable-trust-manager": true
                }
              keycloakRespectAccessTokenTimeout: false
              keycloakValidate: false
  # JCasC:
  #   configScripts:
  #     securityRealm: |
  #       jenkins:
  #         securityRealm:
  #           oic:
  #             clientId: "${clientID}"
  #             clientSecret: "${clientSecret}"
  #             wellKnownOpenIDConfigurationUrl: "${keycloakUrl}/realms/GokDevelopers/.well-known/openid-configuration"
  #             tokenServerUrl: "${keycloakUrl}/realms/GokDevelopers/protocol/openid-connect/token"
  #             authorizationServerUrl: "${keycloakUrl}/realms/GokDevelopers/protocol/openid-connect/auth"
  #             userInfoServerUrl: "${keycloakUrl}/realms/GokDevelopers/protocol/openid-connect/userinfo"
  #             userNameField: "preferred_username"
  #             fullNameFieldName: "name"
  #             emailFieldName: "email"
  #             groupsFieldName: "group-membership"
  #             scopes: "web-origins address phone openid offline_access profile roles microprofile-jwt email"
  #             disableSslVerification: false
  #             logoutFromOpenidProvider: true
  #             endSessionUrl: "${keycloakUrl}/realms/GokDevelopers/protocol/openid-connect/logout"
  #             postLogoutRedirectUrl: ""
  #             escapeHatchEnabled: false
  #             escapeHatchSecret: ""
# controller:
#   JCasC:
#     configScripts:
      # securityRealm: |
      # securityRealm: |
      #   jenkins:
      #     securityRealm:
      #       keycloak:
      #         realm: "GokDevelopers"
      #         authServerUrl: "https://keycloak.gokcloud.com"
      #         clientId: "gok-developers-client"
      #         clientSecret: "1iUh3ANkHCFeoR9vAO5RtGoXBmKlLGR8"
      #         disableTrustManager: true
      #         roles:
      #           realm: true
      #           client: true
      #         allowTokenRefresh: true
      #         disableSslVerification: true
      #         groupsClaim: "groups"
      #         rolesClaim: "roles"
      #         tokenKey: "access_token"
      #         userInfoKey: "userInfo"
      #     authorizationStrategy:
      #       loggedInUsersCanDoAnything:
      #         allowAnonymousRead: false
      #       roleBased:
      #         roles:
      #           global:
      #             - name: "admin"
      #               description: "Admin role"
      #               permissions:
      #                 - "hudson.model.Hudson.Administer"
      #               assignments:
      #                 - "skmaji1"  # Replace with Keycloak usernames
      #             - name: "anonymous"
      #               description: "Anonymous role"
      #               permissions:
      #                 - "hudson.model.Hudson.Read"                

  jenkinsUrl: "https://jenkins.gokcloud.com"
  installPlugins:
    - kubernetes:4324.vfec199a_33512
    - workflow-aggregator:608.v67378e9d3db_1
    - git:5.7.0
    - configuration-as-code:1947.v7d33fe23569c
    - keycloak:2.3.2
    - oic-auth:4.494.v6b_f419104767
    - role-strategy:756.v978cb_392eb_d3
    - matrix-auth:3.2.5

  admin:
    # -- Admin username created as a secret if `controller.admin.createSecret` is true
    username: "admin"  # Replace with your desired admin username

    # -- Admin password is stored in an existing secret
    password: ""  # Leave this empty since the password is in the existing secret

    # -- The key in the existing admin secret containing the username
    userKey: jenkins-admin-user

    # -- The key in the existing admin secret containing the password
    passwordKey: jenkins-admin-password

    # -- Do not create a new secret for the admin user
    createSecret: false

    # -- The name of the existing secret containing the admin credentials
    existingSecret: "jenkins-admin-password"

  ingress:
    # -- Enables ingress
    enabled: true

    paths:
    - path: /
      pathType: ImplementationSpecific
      backend:
        service:
          name: jenkins
          port:
            number: 8080

    # -- IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
    ingressClassName: "nginx"

    # -- Ingress path type
    pathType: ImplementationSpecific

    # -- Force Ingress API version (automatically detected if not set)
    apiVersion: ""

    # -- Default host for the ingress record
    hostName: master.cloud.com

    # -- Default path for the ingress record
    path: /

    # -- Backend service port to use (http or https)
    servicePort: http

    # -- Additional annotations for the Ingress resource
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      kubernetes.io/ingress.class: nginx
      kubernetes.io/ingress.allow-http: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"

    # -- Additional labels for the Ingress resource
    labels: {}

    # -- Enable TLS configuration for the host defined at `ingress.hostName`
    tls:
    - secretName: appingress-certificate
      hosts:
        - master.cloud.com

    # -- Create a TLS secret for this ingress record using self-signed certificates
    selfSigned: true
    
persistence:
  # -- Enable the use of a Jenkins PVC
  enabled: true

  # -- Set to false to disable the `fsgroup-volume` initContainer that will update permissions on the persistent disk
  enableInitChown: true

  storageClass: "jenkins-storage"

  # -- Labels for the PVC
  labels: {}
  # -- The PVC access mode
  accessMode: "ReadWriteOnce"
  # -- The size of the PVC
  size: "8Gi"

  # ref: https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/
  # -- Existing data source to clone PVC from
  dataSource: {}
  #   name: PVC-NAME
  #   kind: PersistentVolumeClaim

  # -- SubPath for jenkins-home mount
  subPath:
  # -- Additional volumes
  volumes: []
  #  - name: nothing
  #    emptyDir: {}

  # -- Additional mounts
  mounts: []
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true
proxy: edge
extraEnvVars: |
  - name: KEYCLOAK_LOG_LEVEL
    value: TRACE
  - name: KEYCLOAK_ADMIN
    value: admin
  - name: KEYCLOAK_ADMIN_PASSWORD
    value: admin
#  - name: PROXY_ADDRESS_FORWARDING
#    value: "true"

ingress:
  ## @param ingress.enabled Enable ingress record generation for Keycloak
  ##
  enabled: true
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: "nginx"
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress record (evaluated as template)
  ##
  hostname: master.cloud.com
  ## @param ingress.path [string] Default path for the ingress record (evaluated as template)
  ##
  path: /
  ## @param ingress.servicePort Backend service port to use
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    kubernetes.io/ingress.class: nginx
    kubernetes.io/ingress.allow-http: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-passthrough: "true"
#    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  ## @param ingress.labels Additional labels for the Ingress resource.
  ## e.g:
  ## labels:
  ##   app: keycloak
  ##
  labels: {}
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: true
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: true
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: keycloak.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - keycloak.local
  ##   secretName: keycloak.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## - name: keycloak.local-tls
  ##   key:
  ##   certificate:
  ##

#adminIngress:
#  ## @param adminIngress.enabled Enable admin ingress record generation for Keycloak
#  ##
#  enabled: true
#  ## @param adminIngress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
#  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
#  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
#  ##
#  ingressClassName: "nginx"
#  ## @param adminIngress.pathType Ingress path type
#  ##
#  pathType: ImplementationSpecific
#  ## @param adminIngress.apiVersion Force Ingress API version (automatically detected if not set)
#  ##
#  apiVersion: ""
#  ## @param adminIngress.hostname Default host for the admin ingress record (evaluated as template)
#  ##
#  hostname: abc.com
#  ## @param adminIngress.path [string] Default path for the admin ingress record (evaluated as template)
#  ##
#  path: /keycloak/admin(/|$)(.*)
#  ## @param adminIngress.servicePort Backend service port to use
#  ## Default is http. Alternative is https.
#  ##
#  servicePort: http
#  ## @param adminIngress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
#  ## Use this parameter to set the required annotations for cert-manager, see
#  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
#  ## e.g:
#  ## annotations:
#  ##   kubernetes.io/ingress.class: nginx
#  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
#  ##
#  annotations:
#    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
#    kubernetes.io/ingress.class: nginx
#    kubernetes.io/ingress.allow-http: "false"
#    nginx.ingress.kubernetes.io/ssl-redirect: "true"
#    ingress.kubernetes.io/ssl-passthrough: "true"
#    nginx.ingress.kubernetes.io/rewrite-target: /$2
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#  ## @param adminIngress.labels Additional labels for the Ingress resource.
#  ## e.g:
#  ## labels:
#  ##   app: keycloak
#  ##
#  labels: {}
#  ## @param adminIngress.tls Enable TLS configuration for the host defined at `adminIngress.hostname` parameter
#  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.adminIngress.hostname .) }}`
#  ## You can:
#  ##   - Use the `adminIngress.secrets` parameter to create this TLS secret
#  ##   - Rely on cert-manager to create it by setting the corresponding annotations
#  ##   - Rely on Helm to create self-signed certificates by setting `adminIngress.selfSigned=true`
#  ##
#  tls: true
#  ## @param adminIngress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
#  ##
#  selfSigned: true
#  ## @param adminIngress.extraHosts An array with additional hostname(s) to be covered with the admin ingress record
#  ## e.g:
#  ## extraHosts:
#  ##   - name: keycloak.local
#  ##     path: /
#  ##
#  extraHosts: []
#  ## @param adminIngress.extraPaths Any additional arbitrary paths that may need to be added to the admin ingress under the main host.
#  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
#  ## extraPaths:
#  ## - path: /*
#  ##   backend:
#  ##     serviceName: ssl-redirect
#  ##     servicePort: use-annotation
#  ##
#  extraPaths: []
#  ## @param adminIngress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
#  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
#  ## extraTls:
#  ## - hosts:
#  ##     - keycloak.local
#  ##   secretName: keycloak.local-tls
#  ##
#  extraTls: []
#  ## @param adminIngress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
#  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
#  ## -----BEGIN RSA PRIVATE KEY-----
#  ##
#  ## name should line up with a tlsSecret set further up
#  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
#  ##
#  ## It is also possible to create and manage the certificates outside of this helm chart
#  ## Please see README.md for more information
#  ## e.g:
#  ## - name: keycloak.local-tls
#  ##   key:
#  ##   certificate:
#  ##
auth:
  adminPassword: admin
  adminUser: admin
  managementPassword: admin

postgresql:
  enabled: true
  auth:
    postgresPassword: "sumit123"
    username: sumit_keycloak
    password: "sumit123"
  primary:
    persistence:
      storageClass: "keycloak-storage"
  common:
    global:
      storageClass: "keycloak-storage"

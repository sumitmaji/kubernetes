#!/bin/bash

source $MOUNT_PATH/root_config

: ${RELEASE_NAME:=$(kubectl config get-contexts  | sed -e '1d' | awk '{print $5}')}

kctl(){
  kubectl --kubeconfig=/root/oauth.conf --token=$(python3 /root/kubernetes/install_k8s/kube-login/cli-auth.py) "$@"
}

release(){
  RELEASE_NAME=$1
}

kcd(){
  # Check if a namespace is provided as an argument
  if [ -z "$1" ]; then
    # No namespace provided, list all namespaces with indexes
    echo "No namespace provided. Listing available namespaces:"
    namespaces=$(kubectl get ns 2>/dev/null | sed -e '1d' | awk '{printf "%d>>\t%s\n", NR, $1}')
    if [ -z "$namespaces" ]; then
      echo "No namespaces found."
      return 1
    fi

    # Display the namespaces
    echo "$namespaces"
    echo "Enter the Index Number to select a namespace:"
    read INDEX

    # Get the selected namespace
    namespace=$(echo "$namespaces" | grep "^$INDEX>>" | awk '{print $2}')
    if [ -z "$namespace" ]; then
      echo "Invalid index selected."
      return 1
    fi
  else
    # Namespace provided as an argument
    namespace=$1
  fi

  # Set the namespace in the current context
  echo "Switching to namespace: $namespace"
  kubectl config set-context $(kubectl config current-context) --namespace "$namespace"
  release "$namespace"
}

current(){
  kubectl config get-contexts  | sed -e '1d' | awk '{print $5}'
}

k(){
  alias k='kubectl'
}

secrets(){
  kubectl get secret -n $RELEASE_NAME
}

getpod() {
  pod=$(getData po)
  echo "$pod"
}

pods(){
  kubectl get po -n $RELEASE_NAME "$@"
}

kwatch(){
  kubectl get po --watch
}

all(){
  kubectl get all -n $RELEASE_NAME "$@"
}

bash(){
  # Fetch all pods in the namespace
  pods=$(kubectl get po -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{print $1}')
  if [ -z "$pods" ]; then
    echo "No pods found in namespace $RELEASE_NAME."
    return 1
  fi

  # Initialize variables for indexed display
  indexed_data=""
  pod_index=1

  # Iterate through each pod to fetch its containers
  while read -r pod_name; do
    # Fetch init containers and regular containers for the pod
    containers=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{" (init)"}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}')
    if [ -z "$containers" ]; then
      containers="No containers found"
    fi

    # Add pod and its containers to indexed data
    container_index=1
    container_details=""
    while read -r container; do
      container_details+="$container($container_index) "
      container_index=$((container_index + 1))
    done <<< "$containers"

    indexed_data+="$pod_index>> $pod_name $container_details\n"
    pod_index=$((pod_index + 1))
  done <<< "$pods"

  # Display the indexed pods and containers
  echo -e "$indexed_data"
  echo "Enter Pod Index and Container Index (e.g., 1,3):"
  read input

  # Split the input into pod index and container index
  IFS=',' read -r POD_INDEX CONTAINER_INDEX <<< "$input"

  # Validate the input
  if ! [[ "$POD_INDEX" =~ ^[0-9]+$ ]] || ! [[ "$CONTAINER_INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter in the format pod-index,container-index (e.g., 1,3)."
    return 1
  fi

  # Get the selected pod name
  pod_name=$(echo -e "$indexed_data" | grep "^$POD_INDEX>>" | awk '{print $2}')
  if [ -z "$pod_name" ]; then
    echo "Invalid pod index selected."
    return 1
  fi

  # Get the selected container name
  container_name=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}' | awk "NR==$CONTAINER_INDEX {print \$1}")
  if [ -z "$container_name" ]; then
    echo "Invalid container index selected."
    return 1
  fi

  # Execute into the selected container
  echo "Opening terminal on pod: $pod_name, container: $container_name"
  kubectl exec -it "$pod_name" -n $RELEASE_NAME -c "$container_name" -- /bin/bash
}

ksh(){
  # Fetch all pods in the namespace
  pods=$(kubectl get po -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{print $1}')
  if [ -z "$pods" ]; then
    echo "No pods found in namespace $RELEASE_NAME."
    return 1
  fi

  # Initialize variables for indexed display
  indexed_data=""
  pod_index=1

  # Iterate through each pod to fetch its containers
  while read -r pod_name; do
    # Fetch init containers and regular containers for the pod
    containers=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{" (init)"}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}')
    if [ -z "$containers" ]; then
      containers="No containers found"
    fi

    # Add pod and its containers to indexed data
    container_index=1
    container_details=""
    while read -r container; do
      container_details+="$container($container_index) "
      container_index=$((container_index + 1))
    done <<< "$containers"

    indexed_data+="$pod_index>> $pod_name $container_details\n"
    pod_index=$((pod_index + 1))
  done <<< "$pods"

  # Display the indexed pods and containers
  echo -e "$indexed_data"
  echo "Enter Pod Index and Container Index (e.g., 1,3):"
  read input

  # Split the input into pod index and container index
  IFS=',' read -r POD_INDEX CONTAINER_INDEX <<< "$input"

  # Validate the input
  if ! [[ "$POD_INDEX" =~ ^[0-9]+$ ]] || ! [[ "$CONTAINER_INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter in the format pod-index,container-index (e.g., 1,3)."
    return 1
  fi

  # Get the selected pod name
  pod_name=$(echo -e "$indexed_data" | grep "^$POD_INDEX>>" | awk '{print $2}')
  if [ -z "$pod_name" ]; then
    echo "Invalid pod index selected."
    return 1
  fi

  # Get the selected container name
  container_name=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}' | awk "NR==$CONTAINER_INDEX {print \$1}")
  if [ -z "$container_name" ]; then
    echo "Invalid container index selected."
    return 1
  fi

  # Execute into the selected container
  echo "Opening terminal on pod: $pod_name, container: $container_name"
  kubectl exec -it "$pod_name" -n $RELEASE_NAME -c "$container_name" -- /bin/sh
}

desc(){
  type=$1
  data=$(kubectl get $type -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{printf "%d>>\t%s\n", NR, $0}')
  echo "$data"
  echo "Enter Index Number to view resource"
  read INDEX
  name=$(echo "$data" | grep "${INDEX}>>" | awk '{print $2}')
  echo "Describing pod $name"
  kubectl describe $type "$name" -n $RELEASE_NAME
}

getHostIp(){
  # Get the list of interfaces and their IP addresses
  data=$(ip -br addr show | awk '{print $1, $3}')

  # Print the list with index numbers
  echo "$data" | awk '{printf "%d>>\t%s\n", NR, $0}'

  # Ask the user to enter an index number
  echo "Enter Index Number to view resource"
  read INDEX

  # Check if the entered index is a number
  if ! [[ "$INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid index. Please enter a number."
    return 1
  fi

  # Get the IP address corresponding to the entered index
  ip=$(echo "$data" | awk "NR==$INDEX {print \$2}" | cut -d '/' -f 1)

  # Check if an IP address was found
  if [ -z "$ip" ]; then
    echo "No IP address found for the entered index."
    return 1
  fi

  # Print the selected IP address
  echo $ip
}


logs(){
  # Fetch all pods in the namespace
  pods=$(kubectl get po -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{print $1}')
  if [ -z "$pods" ]; then
    echo "No pods found in namespace $RELEASE_NAME."
    return 1
  fi

  # Initialize variables for indexed display
  indexed_data=""
  pod_index=1

  # Iterate through each pod to fetch its containers
  while read -r pod_name; do
    # Fetch init containers and regular containers for the pod
    containers=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{" (init)"}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}')
    if [ -z "$containers" ]; then
      containers="No containers found"
    fi

    # Add pod and its containers to indexed data
    container_index=1
    container_details=""
    while read -r container; do
      container_details+="$container($container_index) "
      container_index=$((container_index + 1))
    done <<< "$containers"

    indexed_data+="$pod_index>> $pod_name $container_details\n"
    pod_index=$((pod_index + 1))
  done <<< "$pods"

  # Display the indexed pods and containers
  echo -e "$indexed_data"
  echo "Enter Pod Index and Container Index (e.g., 1,3):"
  read input

  # Split the input into pod index and container index
  IFS=',' read -r POD_INDEX CONTAINER_INDEX <<< "$input"

  # Validate the input
  if ! [[ "$POD_INDEX" =~ ^[0-9]+$ ]] || ! [[ "$CONTAINER_INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter in the format pod-index,container-index (e.g., 1,3)."
    return 1
  fi

  # Get the selected pod name
  pod_name=$(echo -e "$indexed_data" | grep "^$POD_INDEX>>" | awk '{print $2}')
  if [ -z "$pod_name" ]; then
    echo "Invalid pod index selected."
    return 1
  fi

  # Get the selected container name
  container_name=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}' | awk "NR==$CONTAINER_INDEX {print \$1}")
  if [ -z "$container_name" ]; then
    echo "Invalid container index selected."
    return 1
  fi
  # Tail logs of the selected container
  echo "Tailing logs on pod: $pod_name, container: $container_name"

  kubectl logs "$pod_name" -n $RELEASE_NAME -c "$container_name"
}


ktail(){
  # Fetch all pods in the namespace
  pods=$(kubectl get po -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{print $1}')
  if [ -z "$pods" ]; then
    echo "No pods found in namespace $RELEASE_NAME."
    return 1
  fi

  # Initialize variables for indexed display
  indexed_data=""
  pod_index=1

  # Iterate through each pod to fetch its containers
  while read -r pod_name; do
    # Fetch init containers and regular containers for the pod
    containers=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{" (init)"}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}')
    if [ -z "$containers" ]; then
      containers="No containers found"
    fi

    # Add pod and its containers to indexed data
    container_index=1
    container_details=""
    while read -r container; do
      container_details+="$container($container_index) "
      container_index=$((container_index + 1))
    done <<< "$containers"

    indexed_data+="$pod_index>> $pod_name $container_details\n"
    pod_index=$((pod_index + 1))
  done <<< "$pods"

  # Display the indexed pods and containers
  echo -e "$indexed_data"
  echo "Enter Pod Index and Container Index (e.g., 1,3):"
  read input

  # Split the input into pod index and container index
  IFS=',' read -r POD_INDEX CONTAINER_INDEX <<< "$input"

  # Validate the input
  if ! [[ "$POD_INDEX" =~ ^[0-9]+$ ]] || ! [[ "$CONTAINER_INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter in the format pod-index,container-index (e.g., 1,3)."
    return 1
  fi

  # Get the selected pod name
  pod_name=$(echo -e "$indexed_data" | grep "^$POD_INDEX>>" | awk '{print $2}')
  if [ -z "$pod_name" ]; then
    echo "Invalid pod index selected."
    return 1
  fi

  # Get the selected container name
  container_name=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}' | awk "NR==$CONTAINER_INDEX {print \$1}")
  if [ -z "$container_name" ]; then
    echo "Invalid container index selected."
    return 1
  fi
  # Tail logs of the selected container
  echo "Tailing logs on pod: $pod_name, container: $container_name"

  kubectl logs "$pod_name" -n $RELEASE_NAME -c "$container_name" --follow
}


kless(){
  # Fetch all pods in the namespace
  pods=$(kubectl get po -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{print $1}')
  if [ -z "$pods" ]; then
    echo "No pods found in namespace $RELEASE_NAME."
    return 1
  fi

  # Initialize variables for indexed display
  indexed_data=""
  pod_index=1

  # Iterate through each pod to fetch its containers
  while read -r pod_name; do
    # Fetch init containers and regular containers for the pod
    containers=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{" (init)"}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}')
    if [ -z "$containers" ]; then
      containers="No containers found"
    fi

    # Add pod and its containers to indexed data
    container_index=1
    container_details=""
    while read -r container; do
      container_details+="$container($container_index) "
      container_index=$((container_index + 1))
    done <<< "$containers"

    indexed_data+="$pod_index>> $pod_name $container_details\n"
    pod_index=$((pod_index + 1))
  done <<< "$pods"

  # Display the indexed pods and containers
  echo -e "$indexed_data"
  echo "Enter Pod Index and Container Index (e.g., 1,3):"
  read input

  # Split the input into pod index and container index
  IFS=',' read -r POD_INDEX CONTAINER_INDEX <<< "$input"

  # Validate the input
  if ! [[ "$POD_INDEX" =~ ^[0-9]+$ ]] || ! [[ "$CONTAINER_INDEX" =~ ^[0-9]+$ ]]; then
    echo "Invalid input. Please enter in the format pod-index,container-index (e.g., 1,3)."
    return 1
  fi

  # Get the selected pod name
  pod_name=$(echo -e "$indexed_data" | grep "^$POD_INDEX>>" | awk '{print $2}')
  if [ -z "$pod_name" ]; then
    echo "Invalid pod index selected."
    return 1
  fi

  # Get the selected container name
  container_name=$(kubectl get pod "$pod_name" -n $RELEASE_NAME -o jsonpath='{range .spec.initContainers[*]}{.name}{"\n"}{end}{range .spec.containers[*]}{.name}{"\n"}{end}' | awk "NR==$CONTAINER_INDEX {print \$1}")
  if [ -z "$container_name" ]; then
    echo "Invalid container index selected."
    return 1
  fi
  # Tail logs of the selected container
  echo "Tailing logs on pod: $pod_name, container: $container_name"

  kubectl logs "$pod_name" -n $RELEASE_NAME -c "$container_name" | less -R +Gg
}


edit(){
  type=$1
  data=$(kubectl get $type -n $RELEASE_NAME 2>/dev/null | sed -e '1d' | awk '{printf "%d>>\t%s\n", NR, $0}')
  echo "$data"
  echo "Enter Index Number to view resource"
  read INDEX
  name=$(echo "$data" | grep "${INDEX}>>" | awk '{print $2}')
  echo "Describing pod $name"
  kubectl edit $type "$name" -n $RELEASE_NAME
}

ns(){
  kubectl get ns
}

viewcert(){
  content=$1
    data=$(kubectl get secret -n $RELEASE_NAME  -o json | \
        jq -r '[ .items[] | {name: .metadata.name, value: .data | keys | join(",")} ]' | \
        jq -r '.[] | [.name +"     "+ .value] | @tsv' | \
        awk '{printf "%d>>\t%s\n", NR, $0}')
    echo "$data"
    echo "Enter Index secret and secret data key(a,b)"
    read input
    IFS=','
    read -ra arr <<< "$input"
    index=${arr[0]}
    key=${arr[1]}
    name=$(echo "$data" | grep "${index}>>" | awk '{print $2}')
    echo "decoding data for $name"
    kubectl get secret -n $RELEASE_NAME $name -o json | jq -r '.data."'$key'"' | \
     base64 -d | openssl x509 -noout -text
}

decode(){
  content=$1
  data=$(kubectl get secret -n $RELEASE_NAME  -o json | \
      jq -r '[ .items[] | {name: .metadata.name, value: .data | keys | join(",")} ]' | \
      jq -r '.[] | [.name +"     "+ .value] | @tsv' | \
      awk '{printf "%d>>\t%s\n", NR, $0}')
  echo "$data"
  echo "Enter Index secret and secret data key(a,b)"
  read input
  IFS=','
  read -ra arr <<< "$input"
  index=${arr[0]}
  key=${arr[1]}
  name=$(echo "$data" | grep "${index}>>" | awk '{print $2}')
  echo "decoding data for $name"
  kubectl get secret -n $RELEASE_NAME $name -o json | jq -r '.data."'$key'"' | base64 -d
}

subDomain(){
  if [ -z $1 ]; then
    echo "$(defaultSubdomain)"
  else
    echo "$1"
  fi
}

getLetsEncEnv(){
  echo ${LETS_ENCRYPT_ENV}
}

getLetsEncryptUrl(){
  [[ getLetsEncEnv = 'prod' ]] && echo "$LETS_ENCRYPT_PROD_URL" || echo "$LETS_ENCRYPT_STAGING_URL"
}

getClusterIssuerName(){
  case "$CERTMANAGER_CHALANGE_TYPE" in
   'dns') echo "letsencrypt-$(getLetsEncEnv)" ;;
   'http') echo "letsencrypt-$(getLetsEncEnv)" ;;
   'selfsigned') echo "gokselfsign-ca-cluster-issuer" ;;
  esac
}

rootDomain(){
  echo "$GOK_ROOT_DOMAIN"
}

sedRootDomain(){
  rootDomain | sed 's/\./-/g'
}

registrySubdomain(){
  echo "$REGISTRY"
}

defaultSubdomain(){
  echo "$DEFAULT_SUBDOMAIN"
}

keycloakSubdomain(){
  echo "$KEYCLOAK"
}

fullDefaultUrl(){
  echo "${DEFAULT_SUBDOMAIN}.${GOK_ROOT_DOMAIN}"
}

fullRegistryUrl(){
  echo "${REGISTRY}.${GOK_ROOT_DOMAIN}"
}

fullKeycloakUrl(){
  echo "${KEYCLOAK}.${GOK_ROOT_DOMAIN}"
}

echoSuccess(){
  echo -e "\e[32m$1\e[0m"
}

echoFailed(){
  echo -e "\e[31m$1\e[0m"
}

echoWarning(){
  echo -e "\e[32m$1\e[0m"
}

replaceEnvVariable(){
  wget -O- $1 | envsubst
}

decodeSecret(){
  SECRET=$1
  NS=$2
  kubectl get secret -n $NS $SECRET -o json | jq -r '.data."tls.crt"' | base64 -d | openssl x509 -noout -text
}

patchLdapSecure() {
  kubectl patch ing "$NAME" --patch "$(
    cat <<EOF
metadata:
  annotations:
    nginx.ingress.kubernetes.io/auth-signin: https://$(defaultSubdomain).$(rootDomain)/authenticate
    nginx.ingress.kubernetes.io/auth-url: https://$(defaultSubdomain).$(rootDomain)/check
EOF
  )" -n "$NS"
}

patchCertManager() {
  NAME=$1
  NS=$2
  SUBDOMAIN=$(subDomain $3)

  kubectl patch ing "$NAME" --patch "$(
    cat <<EOF
metadata:
  annotations:
    #certmanager.k8s.io/cluster-issuer: $(getClusterIssuerName)
    cert-manager.io/cluster-issuer: $(getClusterIssuerName)
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - ${SUBDOMAIN}.$(rootDomain)
      secretName: ${SUBDOMAIN}-$(sedRootDomain)
EOF
  )" -n "$NS"
  kubectl patch ing "$NAME" --type=json -p='[{"op": "replace", "path": "/spec/rules/0/host", "value":"'$SUBDOMAIN'.'$(rootDomain)'"}]' -n "$NS"

  kubectl --timeout=10s -n ${NS} wait --for=condition=Ready certificates.cert-manager.io ${SUBDOMAIN}-$(sedRootDomain)
}


patchLocalTls() {
  NAME=$1
  NS=$2
  kubectl patch ing "$NAME" --patch "$(
    cat <<EOF
spec:
  tls:
    - hosts:
        - $APP_HOST
      secretName: appingress-certificate
EOF
  )" -n "$NS"
  kubectl patch ing "$NAME" --type=json -p='[{"op": "replace", "path": "/spec/rules/0/host", "value":"master.cloud.com"}]' -n "$NS"
  kubectl patch ing "$NAME" --type=json -p='[{"op": "add", "path": "/metadata/annotations", "value":{"nginx.ingress.kubernetes.io/rewrite-target": "/", "kubernetes.io/ingress.class": "nginx"}}]' -n "$NS"
}

helmInst(){
  RELEASE_NAME=$1
  REPO_NAME=$2
  NS=$3
  helm uninstall $RELEASE_NAME -n $NS

  SECRET_NAME=regcred
  kubectl create namespace $NS >/dev/null 2>&1 || true
  kubectl get secret $SECRET_NAME >/dev/null 2>&1 || kubectl create secret docker-registry \
      $SECRET_NAME --docker-server=$(fullRegistryUrl) --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASSWORD -n $NS
  kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}' -n $NS
  helm install $RELEASE_NAME $PATH_TO_CHART \
    --set image.repository=$(fullRegistryUrl)/$REPO_NAME \
    --namespace $NS

  echo "Waiting for services to be up!!!!"
  kubectl --timeout=180s wait --for=condition=Ready pods --all --namespace "$NS"
  echoSuccess "$REPO_NAME service is up!!"
}


utilHelp(){
  echo "kctl - kubectl with oauth"
  echo "release - set release name"
  echo "kcd - change namespace"
  echo "current - get current namespace"
  echo "k - alias for kubectl"
  echo "secrets - get secrets"
  echo "getpod - get pod"
  echo "pods - get pods"
  echo "all - get all resources"
  echo "bash - open bash terminal"
  echo "desc - describe resource"
  echo "logs - get logs"
  echo "ktail - get logs with follow"
  echo "kless - get logs with less"
  echo "edit - edit resource"
  echo "ns - get namespaces"
  echo "viewcert - view certificate"
  echo "decode - decode secret"
  echo "subDomain - get subdomain"
  echo "getLetsEncEnv - get lets encrypt env"
  echo "getLetsEncryptUrl - get lets encrypt url"
  echo "getClusterIssuerName - get cluster issuer name"
  echo "rootDomain - get root domain"
  echo "sedRootDomain - get root domain with sed"
  echo "registrySubdomain - get registry subdomain"
  echo "defaultSubdomain - get default subdomain"
  echo "keycloakSubdomain - get keycloak subdomain"
  echo "fullDefaultUrl - get full default url"
  echo "fullRegistryUrl - get full registry url"
  echo "fullKeycloakUrl - get full keycloak url"
  echo "echoSuccess - echo success message"
  echo "echoFailed - echo failed message"
  echo "echoWarning - echo warning message"
  echo "replaceEnvVariable - replace env variable"
  echo "decodeSecret - decode secret"
  echo "patchLdapSecure - patch ldap secure"
  echo "patchCertManager - patch cert manager"
  echo "patchLocalTls - patch local tls"
  echo "helmInst - helm install"
  echo "utilHelp - help"
}
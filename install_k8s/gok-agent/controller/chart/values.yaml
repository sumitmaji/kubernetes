replicaCount: 1

image:
  api: registry.gokcloud.com/web-controller:latest

# Service Account configuration for Vault authentication
serviceAccount:
  create: true
  name: gok-controller
  annotations: {}
  automountServiceAccountToken: true

# RBAC configuration for Vault authentication
rbac:
  create: true
  rules:
  - apiGroups: [""]
    resources: ["serviceaccounts/token"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get"]
  
rabbitmqHost: rabbitmq.rabbitmq

env:
  RABBITMQ_HOST: "rabbitmq.rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_VHOST: "/"
  
  # Vault Configuration for RabbitMQ credentials (matches setup_vault_k8s_auth.sh)
  VAULT_ADDR: "http://vault.vault.svc.cloud.uat:8200"
  VAULT_K8S_AUTH_PATH: "kubernetes"
  VAULT_K8S_ROLE: "gok-controller"
  VAULT_PATH: "secret/data/rabbitmq"

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "web-controller"
  hosts:
    - host: web-controller.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - web-controller.example.com
      secretName: web-controller-tls

vault:
  # Enable Vault integration for RabbitMQ credentials
  enabled: true
  
  # Vault server configuration (using service URL with cloud.uat domain)
  address: "http://vault.vault.svc.cloud.uat:8200"
  
  # Path to RabbitMQ credentials in Vault
  credentialPath: "secret/data/rabbitmq"
  
  # Authentication method for Vault
  auth:
    # Use Kubernetes service account for authentication
    method: "kubernetes"
    # Alternative: use token-based authentication
    # method: "token"
    # token: "vault-token-here"
    
    # Kubernetes auth configuration (matches setup_vault_k8s_auth.sh)
    kubernetes:
      role: "gok-controller"
      authPath: "kubernetes"
      serviceAccount: "gok-controller"
      namespace: "gok-controller"
      tokenPath: "/var/run/secrets/kubernetes.io/serviceaccount/token"
  
  # Fallback configuration if Vault is unavailable
  fallback:
    # Try Kubernetes secret as fallback
    useKubernetesSecret: true
    secretName: "rabbitmq-default-user"
    secretNamespace: "rabbitmq"
    
    # Final fallback to environment variables
    useEnvironmentVariables: true
  
  # Legacy Vault agent injector configuration (deprecated)
  # agentInjector: true
  # role: "web-controller"  
  # secretPath: "secret/web-controller"

oidc:
  issuer: https://keycloak.gokcloud.com/realms/GokDevelopers
  clientId: gok-developers-client
  requiredGroup: administrators
  
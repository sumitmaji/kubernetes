# OAuth2 Proxy Upstream Chart Configuration
# This configuration is for the official oauth2-proxy/oauth2-proxy Helm chart

# OAuth2 Proxy image
image:
  repository: quay.io/oauth2-proxy/oauth2-proxy
  tag: "v7.4.0"
  pullPolicy: IfNotPresent

# Configuration for OAuth2 Proxy
config:
  clientID: "PLACEHOLDER_CLIENT_ID"
  clientSecret: "PLACEHOLDER_CLIENT_SECRET"
  cookieSecret: "mycookiesumit123"
  oidcIssuerUrl: ""
  loginHost: ""
  realm: ""
  configFile: |
    # Basic configuration - most settings moved to extraArgs

# Extra arguments (will be merged with config)
extraArgs:
  oidc-issuer-url: "https://keycloak.gokcloud.com/realms/GokDevelopers"
  login-url: "https://keycloak.gokcloud.com/realms/GokDevelopers/protocol/openid-connect/auth"
  redeem-url: "https://keycloak.gokcloud.com/realms/GokDevelopers/protocol/openid-connect/token"
  profile-url: "https://keycloak.gokcloud.com/realms/GokDevelopers/protocol/openid-connect/userinfo"
  validate-url: "https://keycloak.gokcloud.com/realms/GokDevelopers/protocol/openid-connect/userinfo"
  scope: "openid email profile groups sub offline_access"
  oidc-groups-claim: "groups"
  user-id-claim: "sub"
  whitelist-domain: ".gokcloud.com"
  cookie-domain: ".gokcloud.com"
  cookie-secure: true
  set-authorization-header: true
  pass-access-token: true
  pass-authorization-header: true
  ssl-insecure-skip-verify: false
  email-domain: "*"

# Service configuration
service:
  type: ClusterIP
  portNumber: 80
  targetPort: 4180

# Readiness and liveness probes
readinessProbe:
  enabled: false

livenessProbe:
  enabled: true
  path: /ping
  port: 4180
  scheme: HTTP
  initialDelaySeconds: 0
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Ingress configuration - disabled for now
# ingress:
#   enabled: false

# Resources
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

# Pod security context
podSecurityContext:
  fsGroup: 65534

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Extra volumes
extraVolumes:
  - name: secrets
    secret:
      secretName: oauth-secrets
  - name: ca-cert
    configMap:
      name: oauth2-ca-cert

# Extra volume mounts
extraVolumeMounts:
  - name: secrets
    mountPath: /etc/secrets
    readOnly: true
  - name: ca-cert
    mountPath: /etc/ssl/certs/issuer.crt
    subPath: issuer.crt
    readOnly: true

ingress:
  ## @param ingress.enabled Enable ingress record generation for OAuth2 Proxy
  ##
  enabled: true
  ## DEPRECATED: Use ingress.annotations instead of ingress.certManager
  ## certManager: false
  ##

  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: "nginx"
  ## @param ingress.hostname Default host for the ingress record
  ##
  hostname: master.gokcloud.com
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    kubernetes.io/ingress.class: nginx
    kubernetes.io/ingress.allow-http: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.tls=true` and `ingress.certManager=false`
  ##
  tls: []
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: oaut2-proxy.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
  ## e.g:
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls TLS configuration for additional hostname(s) to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - oaut2-proxy.local
  ##   secretName: oaut2-proxy.local-tls
  ##
  extraTls: []
  ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
  ##
  certManager: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: true
  ## @param ingress.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: %%COMPONENT_NAME%%.local-tls
  ##     key: |-
  ##       -----BEGIN RSA PRIVATE KEY-----
  ##       ...
  ##       -----END RSA PRIVATE KEY-----
  ##     certificate: |-
  ##       -----BEGIN CERTIFICATE-----
  ##       ...
  ##       -----END CERTIFICATE-----
  ##
  secrets: []
  ## @param ingress.existingSecretName If you're providing your own certificate and want to manage the secret yourself
  ##
  existingSecretName: ""
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: example.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: example-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []
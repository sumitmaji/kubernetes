"""
{{ service_name }} Configuration
Generated by Service Template Generator

This module contains configuration settings for the Flask application.
"""

import os
from pathlib import Path

class Config:
    """Application configuration class"""
    
    # Basic Flask configuration
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    
    # Service configuration
    SERVICE_NAME = '{{ service_name }}'
    SERVICE_VERSION = '{{ version }}'
    SERVICE_DESCRIPTION = '{{ description }}'
    
    # Server configuration
    HOST = os.environ.get('HOST', '0.0.0.0')
    PORT = int(os.environ.get('PORT', {{ backend_port }}))
    
    # Environment
    ENV = os.environ.get('FLASK_ENV', 'production')
    DEBUG = ENV == 'development'
    
    {% if enable_oauth -%}
    # OAuth/OIDC Configuration
    OAUTH_ISSUER = os.environ.get('OAUTH_ISSUER', '{{ oauth_issuer }}')
    OAUTH_CLIENT_ID = os.environ.get('OAUTH_CLIENT_ID', '{{ oauth_client_id }}')
    OAUTH_JWKS_URI = f"{OAUTH_ISSUER}/protocol/openid-connect/certs"
    
    # JWT Configuration
    JWT_ALGORITHM = 'RS256'
    JWT_AUDIENCE = OAUTH_CLIENT_ID
    {% endif -%}
    
    # CORS Configuration
    CORS_ORIGINS = os.environ.get('CORS_ORIGINS', '*').split(',')
    
    # Logging configuration
    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
    
    # Static files configuration
    {% if has_frontend -%}
    STATIC_FOLDER = os.path.join(Path(__file__).parent.parent, 'static')
    {% endif -%}
    
    @classmethod
    def validate_config(cls):
        """Validate required configuration values"""
        required_vars = []
        
        {% if enable_oauth -%}
        if not cls.OAUTH_ISSUER:
            required_vars.append('OAUTH_ISSUER')
        if not cls.OAUTH_CLIENT_ID:
            required_vars.append('OAUTH_CLIENT_ID')
        {% endif -%}
        
        if required_vars:
            raise ValueError(f"Missing required environment variables: {', '.join(required_vars)}")
    
    @classmethod
    def get_info(cls):
        """Get service information"""
        return {
            'name': cls.SERVICE_NAME,
            'version': cls.SERVICE_VERSION,
            'description': cls.SERVICE_DESCRIPTION,
            'environment': cls.ENV,
            {% if enable_oauth -%}
            'oauth_configured': bool(cls.OAUTH_ISSUER and cls.OAUTH_CLIENT_ID),
            {% endif -%}
        }
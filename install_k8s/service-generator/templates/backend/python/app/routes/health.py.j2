"""
{{ service_name }} Health Check Routes
Generated by Service Template Generator

This module provides health check endpoints for monitoring and load balancers.
"""

from flask import Blueprint, jsonify, current_app
from flask_restx import Resource
import datetime
import os
import psutil

# Create blueprint
health_bp = Blueprint('health', __name__)

@health_bp.route('/health')
def health_check():
    """Simple health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': '{{ service_name }}',
        'version': '{{ version }}',
        'timestamp': datetime.datetime.utcnow().isoformat(),
    })

@health_bp.route('/health/ready')
def readiness_probe():
    """Kubernetes readiness probe endpoint"""
    try:
        # Add any readiness checks here (database connectivity, etc.)
        return jsonify({
            'status': 'ready',
            'service': '{{ service_name }}',
            'timestamp': datetime.datetime.utcnow().isoformat(),
        })
    except Exception as e:
        current_app.logger.error(f'Readiness check failed: {str(e)}')
        return jsonify({
            'status': 'not_ready',
            'error': str(e),
            'timestamp': datetime.datetime.utcnow().isoformat(),
        }), 503

@health_bp.route('/health/live')
def liveness_probe():
    """Kubernetes liveness probe endpoint"""
    return jsonify({
        'status': 'alive',
        'service': '{{ service_name }}',
        'timestamp': datetime.datetime.utcnow().isoformat(),
    })

class HealthAPI(Resource):
    """Health API resource for Swagger documentation"""
    
    def get(self):
        """
        Get detailed health status
        Returns comprehensive health and system information
        """
        try:
            # System information
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            health_data = {
                'status': 'healthy',
                'service': {
                    'name': '{{ service_name }}',
                    'version': '{{ version }}',
                    'description': '{{ description }}',
                },
                'system': {
                    'cpu_percent': psutil.cpu_percent(interval=1),
                    'memory': {
                        'total': memory.total,
                        'available': memory.available,
                        'percent': memory.percent,
                        'used': memory.used,
                    },
                    'disk': {
                        'total': disk.total,
                        'used': disk.used,
                        'free': disk.free,
                        'percent': (disk.used / disk.total) * 100,
                    }
                },
                'environment': {
                    'python_version': os.sys.version,
                    'platform': os.name,
                },
                'timestamp': datetime.datetime.utcnow().isoformat(),
            }
            
            {% if enable_oauth -%}
            # Add OAuth configuration status
            health_data['oauth'] = {
                'configured': bool(current_app.config.get('OAUTH_ISSUER')),
                'issuer': current_app.config.get('OAUTH_ISSUER', 'Not configured'),
            }
            {% endif -%}
            
            return health_data
            
        except Exception as e:
            current_app.logger.error(f'Health check failed: {str(e)}')
            return {
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.datetime.utcnow().isoformat(),
            }, 500
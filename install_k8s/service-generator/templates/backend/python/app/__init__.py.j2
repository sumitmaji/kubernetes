"""
{{ service_name }} Flask Application Factory
Generated by Service Template Generator

This module contains the Flask application factory pattern.
It initializes and configures the Flask app with all necessary components.
"""

from flask import Flask, send_from_directory, request, jsonify
from flask_cors import CORS
from flask_restx import Api, Resource
{% if enable_oauth -%}
from app.auth.middleware import auth_required
{% endif -%}
import os
import logging
from pathlib import Path

def create_app():
    """
    Application factory function that creates and configures the Flask app.
    
    Returns:
        Flask: Configured Flask application instance
    """
    
    # Create Flask application
    app = Flask(__name__, 
                static_folder='static',
                static_url_path='/static')
    
    # Load configuration
    app.config.from_object('app.config.Config')
    
    # Configure CORS
    CORS(app, origins=["*"], supports_credentials=True)
    
    # Setup API with Swagger documentation
    api = Api(app, 
              title='{{ service_name }} API',
              version='{{ version }}',
              description='{{ description }}',
              doc='/api/docs/',
              prefix='/api/v1')
    
    # Configure logging
    setup_logging(app)
    
    # Register routes
    register_routes(app, api)
    
    # Serve static files for frontend
    {% if has_frontend -%}
    @app.route('/', defaults={'path': ''})
    @app.route('/<path:path>')
    def serve_frontend(path):
        """Serve frontend static files"""
        if path != "" and Path(app.static_folder, path).exists():
            return send_from_directory(app.static_folder, path)
        else:
            return send_from_directory(app.static_folder, 'index.html')
    {% endif -%}
    
    # Global error handlers
    @app.errorhandler(404)
    def not_found(error):
        """Handle 404 errors"""
        return jsonify({'error': 'Resource not found'}), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        """Handle 500 errors"""
        app.logger.error(f'Internal error: {str(error)}')
        return jsonify({'error': 'Internal server error'}), 500
    
    {% if enable_oauth -%}
    @app.errorhandler(401)
    def unauthorized(error):
        """Handle authentication errors"""
        return jsonify({'error': 'Authentication required'}), 401
    
    @app.errorhandler(403)
    def forbidden(error):
        """Handle authorization errors"""
        return jsonify({'error': 'Access forbidden'}), 403
    {% endif -%}
    
    app.logger.info(f'{{ service_name }} application created successfully')
    
    return app

def setup_logging(app):
    """Configure application logging"""
    
    if not app.debug:
        # Production logging configuration
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s %(levelname)s %(name)s %(message)s'
        )
        
        app.logger.setLevel(logging.INFO)
        app.logger.info('{{ service_name }} startup')

def register_routes(app, api):
    """Register all application routes and API endpoints"""
    
    # Import route modules
    from app.routes.health import health_bp, HealthAPI
    
    # Register blueprints
    app.register_blueprint(health_bp)
    
    # Register API resources
    api.add_resource(HealthAPI, '/health')
    
    # Example protected endpoint
    {% if enable_oauth -%}
    @api.route('/protected')
    class ProtectedAPI(Resource):
        @auth_required
        def get(self):
            """Example protected endpoint requiring authentication"""
            return {'message': 'Access granted to protected resource', 'user': request.user}
    {% endif -%}
    
    app.logger.info('Routes registered successfully')
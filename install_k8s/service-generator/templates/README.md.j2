# {{ service_name_camel }}

{{ description }}

## Overview

This is a {% if has_backend and has_frontend %}full-stack {% endif %}web service built with:

{% if has_backend -%}
- **Backend**: {{ backend_framework }} ({{ backend_language|title }})
{% endif -%}
{% if has_frontend -%}
- **Frontend**: {{ frontend_framework }} ({{ frontend_language|title }})
{% endif -%}
- **Container**: Docker multi-stage build
- **Orchestration**: Kubernetes with Helm charts
- **CI/CD**: Automated build and deployment scripts
{% if enable_oauth -%}
- **Authentication**: OAuth2/OIDC with Keycloak
{% endif -%}

## Quick Start

### Prerequisites

- Docker and Docker Compose
- Node.js (for local development)
{% if has_backend and backend_language == 'python' -%}
- Python 3.11+
{% endif -%}
- Kubernetes cluster (for deployment)
- Helm 3.x

### Local Development

1. **Clone and setup**:
   ```bash
   git clone <repository-url>
   cd {{ service_name_kebab }}
   ```

2. **Start with Docker Compose**:
   ```bash
   docker-compose up --build
   ```
   
   The application will be available at: http://localhost:{{ port }}

3. **Or run components separately**:

   {% if has_backend -%}
   **Backend**:
   ```bash
   cd backend
   {% if backend_language == 'python' -%}
   pip install -r requirements.txt
   python run.py
   {% elif backend_language == 'nodejs' -%}
   npm install
   npm start
   {% endif -%}
   ```
   {% endif -%}
   
   {% if has_frontend -%}
   **Frontend**:
   ```bash
   cd frontend
   npm install
   npm start
   ```
   {% endif -%}

### Production Build

1. **Build Docker image**:
   ```bash
   ./build.sh
   ```

2. **Push to registry**:
   ```bash
   ./tag_push.sh
   ```

3. **Deploy to Kubernetes**:
   ```bash
   helm install {{ service_name_kebab }} ./chart
   ```

## Configuration

### Environment Variables

{% if has_backend -%}
| Variable | Description | Default |
|----------|-------------|---------|
| `PORT` | {{ backend_framework }} server port | `{{ backend_port }}` |
| `FLASK_ENV` | Flask environment | `production` |
{% if enable_oauth -%}
| `OAUTH_ISSUER` | OAuth2/OIDC issuer URL | `{{ oauth_issuer }}` |
| `OAUTH_CLIENT_ID` | OAuth2 client ID | `{{ oauth_client_id }}` |
| `SECRET_KEY` | Flask secret key | Generated |
{% endif -%}
{% endif -%}

### Helm Values

Key configuration options in `chart/values.yaml`:

```yaml
image:
  repository: {{ registry }}/{{ namespace }}/{{ service_name_kebab }}
  tag: {{ version }}

ingress:
  enabled: true
  hosts:
    - host: {{ ingress_host }}

{% if enable_oauth -%}
# OAuth configuration
app:
  env:
    - name: OAUTH_ISSUER
      value: "{{ oauth_issuer }}"
    - name: OAUTH_CLIENT_ID 
      value: "{{ oauth_client_id }}"
{% endif -%}
```

## API Documentation

{% if has_backend -%}
The API documentation is available at `/api/docs/` when the service is running.

### Key Endpoints

- `GET /health` - Health check
- `GET /health/ready` - Readiness probe
- `GET /health/live` - Liveness probe
{% if enable_oauth -%}
- `GET /api/v1/protected` - Example protected endpoint
{% endif -%}

### Authentication

{% if enable_oauth -%}
This service uses OAuth2/OIDC for authentication:

1. **Authorization**: Include JWT token in Authorization header:
   ```
   Authorization: Bearer <jwt-token>
   ```

2. **Token validation**: Tokens are validated against the OIDC issuer.

3. **User information**: Authenticated user info is available in the request context.
{% else -%}
Authentication is not currently configured for this service.
{% endif -%}
{% endif -%}

## Development

### Project Structure

```
{{ service_name_kebab }}/
├── Dockerfile                  # Multi-stage container build
├── docker-compose.yml         # Local development setup
├── build.sh                   # Build script
├── tag_push.sh               # Registry push script
├── README.md                  # This file
{% if has_backend -%}
├── backend/                   # {{ backend_framework }} backend
│   ├── requirements.txt       # Python dependencies
│   ├── run.py                 # Application entry point
│   └── app/                   # Application modules
│       ├── __init__.py        # Flask app factory
│       ├── config.py          # Configuration
│       ├── routes/            # API routes
│       └── auth/              # Authentication middleware
{% endif -%}
{% if has_frontend -%}
├── frontend/                  # {{ frontend_framework }} frontend
│   ├── package.json           # Node.js dependencies
│   ├── public/                # Static assets
│   └── src/                   # React components
│       ├── App.jsx            # Main application
│       ├── index.jsx          # Entry point
│       └── components/        # Reusable components
{% endif -%}
└── chart/                     # Helm chart
    ├── Chart.yaml             # Chart metadata
    ├── values.yaml            # Default values
    └── templates/             # Kubernetes manifests
```

### Adding Features

{% if has_backend -%}
1. **New API endpoints**: Add route files in `backend/app/routes/`
2. **Authentication**: Use `@auth_required` decorator on protected endpoints
3. **Configuration**: Update `backend/app/config.py`
{% endif -%}

{% if has_frontend -%}
4. **New pages**: Add components in `frontend/src/components/`
5. **Routing**: Update routes in `frontend/src/App.jsx`
6. **Styling**: Use Bootstrap classes or add custom CSS
{% endif -%}

### Testing

{% if has_backend and backend_language == 'python' -%}
**Backend tests**:
```bash
cd backend
python -m pytest tests/
```
{% endif -%}

{% if has_frontend -%}
**Frontend tests**:
```bash
cd frontend
npm test
```
{% endif -%}

**Integration tests**:
```bash
docker-compose -f docker-compose.test.yml up --abort-on-container-exit
```

## Deployment

### Kubernetes Deployment

1. **Install with Helm**:
   ```bash
   helm install {{ service_name_kebab }} ./chart \
     --set image.tag={{ version }} \
     --set ingress.hosts[0].host={{ ingress_host }}
   ```

2. **Upgrade deployment**:
   ```bash
   helm upgrade {{ service_name_kebab }} ./chart \
     --set image.tag=<new-version>
   ```

3. **Uninstall**:
   ```bash
   helm uninstall {{ service_name_kebab }}
   ```

### Production Considerations

- **Resource limits**: Configure CPU/memory limits in values.yaml
- **Scaling**: Enable HPA for automatic scaling
- **Monitoring**: Add Prometheus metrics collection
- **Logging**: Configure structured logging for production
{% if enable_https -%}
- **SSL/TLS**: Certificates are managed by cert-manager
{% endif -%}
{% if enable_oauth -%}
- **Security**: OAuth tokens are validated on each request
{% endif -%}

## Troubleshooting

### Common Issues

1. **Port conflicts**: Ensure ports {{ port }}{% if has_backend %}, {{ backend_port }}{% endif %} are available
2. **Build failures**: Check Docker daemon and build logs
{% if enable_oauth -%}
3. **Authentication errors**: Verify OAuth issuer and client configuration
{% endif -%}
4. **Kubernetes issues**: Check pod logs and service status

### Debug Commands

```bash
# Check service status
kubectl get pods -l app.kubernetes.io/name={{ service_name_kebab }}

# View logs
kubectl logs -l app.kubernetes.io/name={{ service_name_kebab }} -f

# Check service endpoints
kubectl get endpoints {{ service_name_kebab }}

# Test health endpoint
curl https://{{ ingress_host }}/health
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make changes and add tests
4. Submit a pull request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

---

**Service Information**:
- **Name**: {{ service_name }}
- **Version**: {{ version }}
- **Generated**: $(date)
- **Template**: Service Generator v1.0
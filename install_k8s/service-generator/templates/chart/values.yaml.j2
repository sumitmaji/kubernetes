# Default values for {{ service_name_kebab }}
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: {{ registry }}/{{ namespace }}/{{ service_name_kebab }}
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "{{ version }}"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: {{ port }}
  targetPort: {{ backend_port if has_backend else 80 }}

ingress:
  enabled: true
  className: "nginx"
  annotations:
    {% if enable_https -%}
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    {% endif -%}
    nginx.ingress.kubernetes.io/rewrite-target: /
    {% if enable_oauth -%}
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2-proxy.gokcloud.com/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.gokcloud.com/oauth2/start?rd=$scheme://$best_http_host$request_uri"
    nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user,x-auth-request-email,x-auth-request-preferred-username"
    {% endif -%}
  hosts:
    - host: {{ ingress_host }}
      paths:
        - path: /
          pathType: Prefix
  {% if enable_https -%}
  tls:
    - secretName: {{ service_name_kebab }}-tls
      hosts:
        - {{ ingress_host }}
  {% endif -%}

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application specific configuration
app:
  name: {{ service_name }}
  version: {{ version }}
  description: {{ description }}
  
  # Environment variables
  env:
    - name: FLASK_ENV
      value: "production"
    - name: PORT
      value: "{{ backend_port }}"
    {% if enable_oauth -%}
    - name: OAUTH_ISSUER
      value: "{{ oauth_issuer }}"
    - name: OAUTH_CLIENT_ID
      value: "{{ oauth_client_id }}"
    {% endif -%}
  
  # Secrets (if any)
  secrets: []
    # - name: SECRET_KEY
    #   value: "your-secret-key"
  
  # Health check configuration
  healthCheck:
    path: /health
    port: {{ backend_port if has_backend else 80 }}
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  # Readiness probe configuration
  readinessCheck:
    path: /health/ready
    port: {{ backend_port if has_backend else 80 }}
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Monitoring and observability
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false
    path: /metrics
    port: {{ backend_port if has_backend else 80 }}

# Persistence (if needed)
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi

# Database configuration (if needed)
database:
  enabled: false
  type: postgresql
  host: ""
  port: 5432
  database: {{ service_name_snake }}
  username: {{ service_name_snake }}
  password: ""

# Redis configuration (if needed)
redis:
  enabled: false
  host: ""
  port: 6379
  database: 0
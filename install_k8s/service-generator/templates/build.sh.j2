#!/bin/bash
# Build script for {{ service_name }}
# Generated by Service Template Generator

set -e

# Source configuration if it exists
if [ -f "config" ]; then
    source config
fi

# Default values
SERVICE_NAME="{{ service_name_kebab }}"
VERSION="{{ version }}"
REGISTRY="${REGISTRY:-{{ registry }}}"
NAMESPACE="${NAMESPACE:-{{ namespace }}}"

# Build arguments
BUILD_ARGS=""
if [ ! -z "$HTTP_PROXY" ]; then
    BUILD_ARGS="$BUILD_ARGS --build-arg HTTP_PROXY=$HTTP_PROXY"
fi
if [ ! -z "$HTTPS_PROXY" ]; then
    BUILD_ARGS="$BUILD_ARGS --build-arg HTTPS_PROXY=$HTTPS_PROXY"
fi
if [ ! -z "$NO_PROXY" ]; then
    BUILD_ARGS="$BUILD_ARGS --build-arg NO_PROXY=$NO_PROXY"
fi

# Build the image
echo "Building $SERVICE_NAME:$VERSION..."

docker build $BUILD_ARGS \
    --build-arg SERVICE_NAME="$SERVICE_NAME" \
    --build-arg VERSION="$VERSION" \
    -t $SERVICE_NAME:$VERSION \
    .

echo "Build complete: $SERVICE_NAME:$VERSION"

# Tag for registry
if [ ! -z "$REGISTRY" ]; then
    FULL_IMAGE_NAME="$REGISTRY/$NAMESPACE/$SERVICE_NAME:$VERSION"
    docker tag $SERVICE_NAME:$VERSION $FULL_IMAGE_NAME
    echo "Tagged: $FULL_IMAGE_NAME"
    
    # Also tag as latest
    LATEST_IMAGE_NAME="$REGISTRY/$NAMESPACE/$SERVICE_NAME:latest"
    docker tag $SERVICE_NAME:$VERSION $LATEST_IMAGE_NAME
    echo "Tagged: $LATEST_IMAGE_NAME"
fi

echo "Build completed successfully!"
echo ""
echo "To run locally:"
echo "  docker run -p {{ port }}:{{ backend_port if has_backend else 80 }} $SERVICE_NAME:$VERSION"
echo ""
echo "To push to registry:"
echo "  ./tag_push.sh"